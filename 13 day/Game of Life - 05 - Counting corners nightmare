// Copyright 2022 finchren
#include <stdio.h>
#include <stdlib.h>

char* dynamic_array_fill(int height, int width);
void dynamic_array_print(char* array, int height, int width);
int get_random_number(int random_seed_number);
int count_neighborgood_regular(char* array, int height, int width, int x, int y);
int count_neighborgood_corner(char* array, int height, int width, int x, int y);
int count_neighborgood_borders(char* array, int height, int width, int x, int y);
char* update_array(char* prevous_array, int height, int width);

int main() {
    int array_height = 25, array_width = 80, counter = 0;
    char* array = dynamic_array_fill(array_height, array_width);
    if (array == NULL) {
        printf("NULL error");
    }
    dynamic_array_print(array, array_height, array_width);
    while (counter < 5)
    {
        char* next_array = update_array(array, array_height, array_width);
        if (next_array == NULL) {
            printf("NULL error");
            }
        free(array);
        array = next_array;
        dynamic_array_print(array, array_height, array_width);
        counter++;
        printf("\n");
        }
    
    return 0;
}

char* dynamic_array_fill(int height, int width) {
    char* array = (char*)calloc(height*width, sizeof(char));
    if(array == NULL)
        return NULL;
    for(int y = 0; y < height; y++)
    {
        for(int x = 0; x < width; x++)
        {
            if(get_random_number(100) < 25)
            {
                *(array + y*width + x) = '#';
            }
            else
            {
                *(array + y*width + x) = '.';
            }
        }
    }
    return array;
}

void dynamic_array_print(char *array, int height, int width) {
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            printf("%c", *(array + i*width + j));
        }
        printf("\n");
    }
}

int get_random_number(int random_seed_number) {
    return((int)rand() % random_seed_number);
}

int count_neighborgood_regular(char* array, int height, int width, int x, int y) {
    int count = 0;
    int center = y*height+x;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            char cell = *(array+center+(i*width)+j);
            if (cell == '#') {
                count++;
            }
        }
    }
    return count;
}

int count_neighborgood_corner(char* array, int height, int width, int x, int y) {
    int count = 0;
    int center = y*height+x;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            char cell = *(array+center+(i*width)+j);
            if (cell == '#') {
                count++;
            }
        }
    }
    return count;
}

int count_neighborgood_borders(char* array, int height, int width, int x, int y) {
    int count = 0;
    int center = y*height+x;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            char cell = *(array+center+(i*width)+j);
            if (cell == '#') {
                count++;
            }
        }
    }
    return count;
}

// Any live cell with fewer than two live neighbours dies, as if by underpopulation.
// Any live cell with two or three live neighbours lives on to the next generation.
// Any live cell with more than three live neighbours dies, as if by overpopulation.
// Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

char* update_array(char* previous_array, int height, int width) {
    char* next_array = calloc(height*width, sizeof(char));
    if (next_array == NULL) {
        printf("NULL error");
    }
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            if (((y > 0) || (y < 25)) && ((x > 0) || (x < 80))) {
                int alive = count_neighborgood_regular(previous_array, height, width, x, y);
                int cell = *(previous_array+y*width+x);
                if (cell == '#') alive--;
                *(next_array+y*width+x) = cell;
                if(alive < 2) {
                    *(next_array+y*width+x) = '.';
                }
                if((alive == 2 || alive == 3) && (cell == '#')) {
                    *(next_array+y*width+x) = '#';
                }
                else if (alive > 3 && cell == 1) {
                    *(next_array+y*width+x) = '.';
                }
                else if (alive == 3 && cell == 0) {
                    *(next_array+y*width+x) = '#';
                }
            }
            else if (((y == 0) || (y == 25)) && ((x == 0) || (x == 80))){
               //count corners 
               int alive = count_neighborgood_corner(previous_array, height, width, x, y);
                int cell = *(previous_array+y*width+x);
                if (cell == '#') alive--;
                *(next_array+y*width+x) = cell;
                if(alive < 2) {
                    *(next_array+y*width+x) = '.';
                }
                if((alive == 2 || alive == 3) && (cell == '#')) {
                    *(next_array+y*width+x) = '#';
                }
                else if (alive > 3 && cell == 1) {
                    *(next_array+y*width+x) = '.';
                }
                else if (alive == 3 && cell == 0) {
                    *(next_array+y*width+x) = '#';
                }
            }
            else if (
            ((y == 0) && ((x < 80) && (x > 0))) ||
            ((y > 0) && ((y < 24) && (x == 1))) ||
            ((y == 25) && ((x > 0) && (x < 80))) ||
            (((y > 0) && (y < 25)) && (x == 80))
            ) {
                //count top/bottom/left/right except for corners
                int alive = count_neighborgood_borders(previous_array, height, width, x, y);
                int cell = *(previous_array+y*width+x);
                if (cell == '#') alive--;
                *(next_array+y*width+x) = cell;
                if(alive < 2) {
                    *(next_array+y*width+x) = '.';
                }
                if((alive == 2 || alive == 3) && (cell == '#')) {
                    *(next_array+y*width+x) = '#';
                }
                else if (alive > 3 && cell == 1) {
                    *(next_array+y*width+x) = '.';
                }
                else if (alive == 3 && cell == 0) {
                    *(next_array+y*width+x) = '#';
                }
            }
        }
    }
    return next_array;
}
