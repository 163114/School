/*
    Search module for the desired value from data array.

    Returned value must be:
        - "even"
        - ">= mean"
        - "<= mean + 3 * sqrt(variance)"
        - "!= 0"

        OR

        0
*/

#include <stdio.h>
#include <math.h>
#define NMAX 30

int input(int *a, int *n);
// void output(int *a, int n);
// int max(int *a, int n);
// int min(int *a, int n);
double mean(int *a, int n);
double variance(int *a, int n);
int is_even(int *a, int n);

void output_result(
    // int max_v,
    //             int min_v,
                double mean_v,
                int is_even,
                double variance_v
);

int main() {
    int n, data[NMAX];
    if (input(data, &n) == 0) {
    // output(data, n);
    output_result(
        // max(data, n),
                // min(data, n),
                mean(data, n),
                is_even(data, n),
                variance(data, n));
    } else {
        printf("n/a");
    }
    return 0;
}

int input(int *a, int *n) {
    char c;
    int input = scanf("%d%c", n, &c);
    if (*n <= 0 || *n > NMAX) {
        return 1;
    }
    if (input == 2 && c == '\n') {
        for (int *p = a; p - a < *n; p++) {
        int num = scanf("%d", p);
        if (num != 1) {
            return 1;
            }
        }
    } else {
        return 1;
    }
    char garbage = getchar();
    if (garbage != '\n' && garbage != EOF) {
        return 1;
                }
    return 0;
}

// void output(int *a, int n) {
//     for (int *p = a; p - a < n; p++) {
//         printf("%d", *p);
//         if (p - a < n - 1) {
//             printf(" ");
//         }
//     }
// }

void output_result(
    // int max_v,
    //                 int min_v,
                    double mean_v,
                    int is_even,
                    double variance_v
                   ) {
    double main_result = 0.0;
    printf("%f %d %f", mean_v, is_even, variance_v);

    printf("%6lf", main_result);
}

int max(int *a, int n) {
    int max_number = a[0];
    for (int *p = a; p - a < n; p++) {
        if (*p > max_number) {
            max_number = *p;
        }
    }
    return max_number;
}

int min(int *a, int n) {
    int min_number = a[0];
    for (int *p = a; p - a < n; p++) {
        if (*p < min_number) {
            min_number = *p;
        }
    }
    return min_number;
}

double mean(int *a, int n) {
    double mean_number = 0.0;
    for (int *p = a; p - a < n; p++) {
        mean_number += *p;
    }
    double mean_result = mean_number / n;
    return mean_result;
}

double variance(int *a, int n) {
    double variance_number = 0.0;
    for (int *p = a; p - a < n; p++) {
        variance_number += (*p - mean(a, n)) * (*p - mean(a, n));
    }
    double variance_result = variance_number / n;
    return variance_result;
}

int is_even(int *a, int n) {
    for (int *p = a; p - a < n; p++) {
        if (*p/2 == 0) {
            return 0;
            }
        }
    return 1;
}
